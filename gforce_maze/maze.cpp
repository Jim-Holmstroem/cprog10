#include "matrix.h"         // inkludera din headerfil här
#include<unistd.h>


int main()
{
    const char *small[] =
	{"#####################",
	 "      # # #   # # # #",
	 "##### #     # #   # #",
	 "#     ##### # # #   #",
	 "### # #   # #   # # #",
	 "# # # # # # ####### #",
	 "#   #   #   #       #",
	 "## ############ #####",
	 "#   #                ",
	 "#####################",
	 0};
    
    const char *medium[] =
	{"# #######################################",
	 "# #                   #     #   #     # #",
	 "# # ### ############# # # ### # # ### # #",
	 "# #   #     #   #   #   #     # #   # # #",
	 "# ### # ### # # # # ##### ####### # # # #",
	 "#   # # # #   #   #     #   #   # # # # #",
	 "### # # # # ########### ##### # ### # # #",
	 "#   # #   #   # #             # #   # # #",
	 "# # # ####### # # ############# # ### # #",
	 "# # #     #   # #             # #   # # #",
	 "# ### ### # ### ############# # ### # # #",
	 "#   #   # #   #   #     #   # # #   # # #",
	 "### ##### ### ### # # ### # # # # ### # #",
	 "#   #     # # #     #     # # # # # #   #",
	 "# ### ##### # # ############# # # # # ###",
	 "#     #     # #               # # # #   #",
	 "####### ##### ################### # # ###",
	 "#         #   #     #             # #   #",
	 "# ####### # ### # # # ############# ### #",
	 "#       #       # #               #     #",
	 "####################################### #",
	 0};

    const char *large[] =
	{"# ###############################################################################",
	 "# #         # #     #       #         #       #   #     #     #   #             #",
	 "# ### ##### # # ### # ##### # ##### # # ### ### # # ### ##### # # # # ##### #####",
	 "#   # #   # # # # #   #     # #   # #   # #   # # # # #     # # #   # #   # #   #",
	 "# # # # # # # # # ### # ##### # # # ##### # # # # # # # ### # # ##### # # ### # #",
	 "# #   # #     # # #   #     #   # # #   #   #   # # # # # #   #     #   # #   # #",
	 "####### ####### # # ### ######### ### ####### ### # # # # # # ##### ##### # ### #",
	 "#   #   #     # # # # #         #   #   #     #   # #   #   #   # #     #   #   #",
	 "# # # ### ### # # # # # ####### ### ### # # ### ##### ######### # # ### ##### ###",
	 "# #   #   # #   #   # # #     #   # #   # #   #     # #   #   #   # # # #   #   #",
	 "# ##### ### # ####### # ##### # # # # ### ######### # ### # # ##### # # # # # ###",
	 "#     #     #   #     #     # # #   #     #   #   # #   # # #       # # # # #   #",
	 "# ##### # ##### # ######### # ####### ##### # ### # # # # # ######### # ### # # #",
	 "#   #   # #   #     #     #   #     #     # #   # # # #   #   #       #     # # #",
	 "### # ### # ####### # ### ##### ### ##### # ### # # # ######### # ########### # #",
	 "#   # # #       # #   #       #   #     # # # #     # #         #   #     #   # #",
	 "# ### # ####### # ##### ######### ##### ### # # ##### # ######### # # ##### # # #",
	 "# #   #   #     #       #   #     #   #     # # #   # # #     #   # #   #   # # #",
	 "# # ##### # ############# ### ### # # ####### # # # # # ### # # ### ### # ##### #",
	 "#   #   # #             #   #   # # # #   #   #   # # # #   # #   # #   # #   # #",
	 "##### # # ######### ### ### ### ### # # # # ####### # # # ##### # # # ### # # # #",
	 "#   # #           #   #   #   #     #   # #   #       # # #     # # #   # # #   #",
	 "# ### ########### ### # ### ### ######### # # ######### # # ##### ### # # # #####",
	 "# #   #     #   # #   #   #   # #     #   # #   #     # #   # #   #   # # # #   #",
	 "# # ### ### # # # # ##### ### # # ### # ####### # # # # ##### # ### # # # # # ###",
	 "# # #     #   #   # #   #     # # #   #         # # # #       #   # # # # #     #",
	 "# # # ### ########### # # ##### # ######### ##### # ### ######### # ### # ##### #",
	 "#   #   # #       #   #   #     #         #       #     #   #     #   # # #     #",
	 "####### # # ##### # ##################### ########### ### # # ####### # # # #####",
	 "#     # # # #   #   #     #     #   #   # #     #   # #   # # #       # # #     #",
	 "# ### # ### # ####### # # # ### ### # # # # # # # # # # ##### # # ####### #######",
	 "# # #       # #       # #   #   #   # # #   # # # # # # #     # #   # #   #     #",
	 "# # # ####### # ####### ##### ### ### # ##### # # # ### # ### # # # # # ### ### #",
	 "#   # #     # #       # #   #   #     #   # # #   #     #   #   # #   #     # # #",
	 "##### # ### # ####### ### # # ########### # # # ### ####### ####### ######### # #",
	 "#   #     #         #   # # #       #   # # # # # #   #     #     #   #   #   # #",
	 "# ### # ########### ### # # ####### # # # # # # # # # # ##### ### ### # # # ### #",
	 "# #   # #   #   #     #   #       #   #     # # # # #   #     #   # # # #     # #",
	 "# # ##### ### # ########### ############# ### # # ####### ##### ### # ### # # # #",
	 "# #     #   # #     #   #   #     #     #   # # #       # #     #   #     # #   #",
	 "# ### # ### # ##### # # # ### ### # ### ##### # # ##### # # ##### ######### #####",
	 "#   # #   # # #     # #   #   #   #   #       # #     #   #   #   #   #     #   #",
	 "### ##### # # ####### # ### ### ##### ########### ### ####### # ### # ####### # #",
	 "#     #   # #       # #   # #   #   #           # #   #       #   # #       # # #",
	 "### # # ### ####### # ### # # ### # ########### ### ####### ### # # ####### # # #",
	 "#   # # #   #   #   #   #   #   # #   #             #     #   # # #   #   # # # #",
	 "# ##### # # # # # ##### # ##### ### # ############### ### ##### # ### # # # ### #",
	 "#         # # # # #     # #   # #   #         #     #   #       # #   # # #   # #",
	 "# ##### ### # # # # ####### # # # ##### ##### # ##### # ######### # ### # ### # #",
	 "# #   #   #   # # #     #   # # # #   # # #   #   #   # # #   #   # #   #   #   #",
	 "# # # ######### # ##### # ### # # # # # # # # ### # # # # # ### # ### ##### # ###",
	 "# # #   #     # #     # #   # #     # #   # #     # # # # #   # #   #     #     #",
	 "### # # # ### # ##### # # # ######### ##### ####### # # # ### # ### ########### #",
	 "#   # #   #   #   #   # # #         # #   #   # #   # #   # #   #       #   #   #",
	 "# ##### ####### # # ### # ######### # # # ### # # ####### # # ### ####### # # ###",
	 "# #   # #     # # #   # #   #   # # # # #   #   # #     # # #   #         # #   #",
	 "# # # # # ### # ### # # ### # # # # # # # ### ### # ##### # # # ########### ### #",
	 "#   # #   # #   #   # # # # # #   #   # # #   #   #     #   # #   #   #   #     #",
	 "##### ##### # ### ### # # # # # ####### # # ### ####### ##### ### # # # #########",
	 "#           #       #     #   #         # #           #         #   #           #",
	 "############################################################################### #",
	 0};

    // använd matrisklassen för att lösa matriserna ovan!
    Matrix maze1;
    while(true){
	maze1.read(large);
	maze1.solve();
	std::cout << maze1 << std::endl;
	maze1.shift++;
	if(maze1.shift >= maze1.text.size() ){
	    maze1.shift=0;
	}
	sleep(1);
        /*unsigned int time = -1;
        time /= 32;
        while(time--){}*/
    }
/*    maze1.read(medium);
    maze1.solve();
    std::cout << maze1 << std::endl;*/
/*    maze1.read(large);
    maze1.solve();
    std::cout << maze1 << std::endl;*/

    return 0; 
}
