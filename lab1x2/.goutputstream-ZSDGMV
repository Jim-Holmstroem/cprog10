;;;;;;;; Simon's Emacs settings, created 22 nov 2010, updated 22 nov 2010


;;;; taken from emacswiki.org

;; Globally Change the Default Font
(set-face-attribute 'default nil :font "DejaVu Sans Mono-8")

;; Mode which show line numbers in buffer
(global-linum-mode 1)

;;;;;;(setq tab-width 4)

;;;; http://www.emacswiki.org/emacs/IndentingC
(setq-default c-indent-tabs-mode nil     ; Pressing TAB should cause indentation (OBS!!!!!! I changed argument t to nil so now all spaces)
            c-indent-level 4         ; A TAB is equivilent to four spaces
            c-argdecl-indent 0       ; Do not indent argument decl's extra
            c-tab-always-indent t
            backward-delete-function nil) ; DO NOT expand tabs when deleting
(c-add-style "my-c-style" '((c-continued-statement-offset 4))) ; If a statement continues on the next line, indent the continuation by 4
(defun my-c-mode-hook ()
(c-set-style "my-c-style")
(c-set-offset 'substatement-open '0) ; brackets should be at same indentation level as the statements they open
(c-set-offset 'inline-open '+)
(c-set-offset 'block-open '+)
(c-set-offset 'brace-list-open '+)   ; all "opens" should be indented by the c-indent-level
(c-set-offset 'case-label '+))       ; indent case labels by c-indent-level, too
(add-hook 'c-mode-hook 'my-c-mode-hook)
(add-hook 'c++-mode-hook 'my-c-mode-hook)


;;;; http://emacsblog.org/2007/01/17/indent-whole-buffer/
;; Open a file, M-x iwb, save, commit, and edit happily
(defun iwb ()
  "indent whole buffer"
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max) nil)
  (untabify (point-min) (point-max)))
(global-set-key [f12] 'iwb)


;;;; http://www.gnu.org/software/emacs/emacs-lisp-intro/html_node/Emacs-Initialization.html

;;; The Help Key
; Control-h is the help key;
; after typing control-h, type a letter to
; indicate the subject about which you want help.
; For an explanation of the help facility,
; type control-h two times in a row.

; To find out about any mode, type control-h m
; while in that mode.  For example, to find out
; about mail mode, enter mail mode and then type
; control-h m.

;;; Text mode and Auto Fill mode
;; The next two lines put Emacs into Text mode
;; and Auto Fill mode, and are for writers who
;; want to start writing prose rather than code.
(setq-default major-mode 'text-mode)
(add-hook 'text-mode-hook 'turn-on-auto-fill)

;;; Prevent Extraneous Tabs (use only spaces for indentation, because LaTex compiler does not recognize tabs)
;;;;;;;(setq-default indent-tabs-mode nil)

;;; Compare windows
(global-set-key "\C-cw" 'compare-windows)

;;; Keybinding for `occur'
; I use occur a lot, so let's bind it to a key:
(global-set-key "\C-co" 'occur)

;;; Rebind `C-x C-b' for `buffer-menu'
(global-set-key "\C-x\C-b" 'buffer-menu)

;;; Line to top of window;
;;; replace three keystroke sequence  C-u 0 C-l
(defun line-to-top-of-window ()
"Move the line point is on to top of window."
(interactive)
(recenter 0))
(global-set-key [f6] 'line-to-top-of-window)

(when (>= emacs-major-version 21)
	(blink-cursor-mode 0)
	;; Insert newline when you press `C-n' (next-line)
	;; at the end of the buffer
	;;;;;;;;;;;;;;;;;;;;(setq next-line-add-newlines t)
	;; Turn on image viewing
	(auto-image-file-mode t)
	;; Turn on menu bar (this bar has text)
	;; (Use numeric argument to turn on)
	(menu-bar-mode 1)
	;; Turn off tool bar (this bar has icons)
	;; (Use numeric argument to turn on)
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(tool-bar-mode nil)
	;; Turn off tooltip mode for tool bar
	;; (This mode causes icon explanations to pop up)
	;; (Use numeric argument to turn on)
	;;;;;;;;;;;;;;;;;;;;;;;;(tooltip-mode nil)
	;; If tooltips turned on, make tips appear promptly
	(setq tooltip-delay 0.1)  ; default is 0.7 second
)

;;; Turn off a blinking cursor!
;(if (fboundp 'blink-cursor-mode)
;	(blink-cursor-mode -1))

;; or start GNU Emacs with the command emacs -nbc.

;;; When using `grep'
;; '-i'   Ignore case distinctions
;; '-n'   Prefix each line of output with line number
;; '-H'   Print the filename for each match.
;; '-e'   Protect patterns beginning with a hyphen character, '-'
(setq grep-command "grep -i -nH -e ")

;; Find an existing buffer, even if it has a different name
;; This avoids problems with symbolic links.
;;;;;;;;;;(setq find-file-existing-other-name t)


(set-language-environment "latin-1")
;; Remember you can enable or disable multilingual text input
;; with the toggle-input-method' (C-\) command
(setq default-input-method "latin-1-prefix")


;; If you want to write with Chinese 'GB' characters, set this instead:
;(set-language-environment "Chinese-GB")
;(setq default-input-method "chinese-tonepy")

;; version-control set to true allows for versioning: if you edit the file prog1.c, then you will end up with a previous version, prog1.c. and the current file.
(setq-default version-control t)



;;;;;;;;;;;;;;; taken from my.nada.kth.se

;; Keybindings
(global-set-key [ end ] 'end-of-line)
(global-set-key [ home ] 'beginning-of-line)
(global-set-key [ C-end ] 'end-of-buffer)
(global-set-key [ C-home ] 'beginning-of-buffer)
(global-set-key [ C-tab ] 'hippie-expand)
(global-set-key [ delete ] 'delete-char)
(global-set-key [ C-backspace ] 'backward-kill-word)
(global-set-key "\C-xe" 'eval-current-buffer)
(global-set-key "\C-xg" 'goto-line)
(global-set-key "\C-x\C-j" 'compile)
(global-set-key [ C-return ] 'fill-paragraph)

;; Display line/col/time in statusbar
(setq line-number-mode 't)
(setq column-number-mode 't)

;; Highlight search results
(setq search-highlight 't)
(setq query-replace-highlight 't)

;; Return to same line on a scroll back
(setq scroll-preserve-screen-position 't)

;; Set the frame's title. %b is the name of the buffer. %+ indicates
;; the state of the buffer: * if modified, % if read only, or -
;; otherwise. Two of them to emulate the mode line. %f for the file
;; name. Incredibly useful!
(setq frame-title-format "%b  %+%+")

;; Set for visual bell
(setq visible-bell 't)

;; Make searches case insensitive
(setq case-fold-search 't)

;;This enables archive browsing and editing.
(setq auto-mode-alist
      (cons '("\\.\\(arc\\|zip\\|lzh\\|zoo\\)\\'" . archive-mode)
            auto-mode-alist))

;;This enables automatic resizing of the minibuffer when its contents
;;won't fit into a single line.
(condition-case err
    (resize-minibuffer-mode 1)
  (error
   (message "Cannot resize minibuffer %s" (cdr err))))

;; Set up support for font-lock
(if (fboundp 'global-font-lock-mode)
      (global-font-lock-mode 't))

;; Lots of colors! :)
(setq font-lock-maximum-decoration 't)

;; Set the maximum buffer size for coloured text to unlimited
(setq-default font-lock-maximum-size nil)

;; Ask to add new line at end of file
(setq require-final-newline 'ask)

;; Load parenthesis match
(require 'paren)
(show-paren-mode 't)
(setq blink-matching-paren-distance nil)

;; Set background color
(set-background-color "white")

;; Set region background color
(set-face-background 'region "palegreen")

;;utökad LaTeX-mod
(require 'tex-site)


;; http://martinaulbach.net/en/ubuntu/software/64-emacs-file
;; *****************************
;; *** AUCTEX-specific stuff ***
;; *****************************

;; do not choose different fonts for section, subsection etc.
;;;;;;;;;;;;;;;; (setq font-latex-fontify-sectioning 'color)

;; font locking (i.e. syntax highlighting) spanning more than one line
(setq font-latex-do-multi-line t)

;; enable/disable highlighting of subscript and superscript via raised
;; or lowered text
(setq font-latex-fontify-script nil)
