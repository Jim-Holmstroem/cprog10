#ifndef MATRIX_TEST_H_INCLUDED
#define MATRIX_TEST_H_INCLUDED

#include "matrix.h"
#include "../cxxtest/cxxtest/TestSuite.h"
#include <fstream>
#include <sstream>
#include <iostream> //added for istream

//TS_FAIL just fails the test. It is like an assert(false) with an error message. For example:
//void testSomething( void )
//{
//    TS_FAIL( "I don't know how to test this!" );
//}

//TS_ASSERT is the basic all-around tester. It works just like the well-respected assert() macro (which I sincerely hope you know and use!) An example:
//void testSquare( void )
//{
//    MyFileLibrary::createEmptyFile( "test.bin" );
//    TS_ASSERT( access( "test.bin", 0 ) == 0 );
//}

//This is the second most useful tester. As the name hints, it is used to test if two values are equal.
//    void testSquare( void )
//{
//    TS_ASSERT_EQUALS( square(-5), 25 );
//}

//The opposite of TS_ASSERT_EQUALS(), this macro is used to assert that two values are not equal.
//    void testNumberGenerator( void )
//{
//    int first = generateNumber();
//    int second = generateNumber();
//    TS_ASSERT_DIFFERS( first, second );
//}

//This macro asserts that the first operand is less than the second.
//void testFindLargerNumber( void )
//{
//    TS_ASSERT_LESS_THAN( 23, findLargerNumber(23) );
//}
// or TS_ASSERT_LESS_THAN_EQUALS

//These assertions are used to test whether an expression throws an exception. TS_ASSERT_THROWS is used when you want to verify the type of exception thrown, and TS_ASSERT_THROWS_ANYTHING is used to just make sure something is thrown. As you might have guessed, TS_ASSERT_THROWS_NOTHING asserts that nothing is thrown. (v3.10.0) TS_ASSERT_THROWS_EQUALS checks the type of the exception as in TS_ASSERT_THROWS then allows you to compare two value (one of which will presumably be the caught object). TS_ASSERT_THROWS_ASSERT is the general case, and allows you to make any assertion about the thrown value. These macros may seem a little complicated, but they can be very useful; see below for an example.

//void testFunctionsWhichThrowExceptions( void )
//{
//    TS_ASSERT_THROWS_NOTHING( checkInput(1) );
//    TS_ASSERT_THROWS( checkInput(-11), std::runtime_error );
//    TS_ASSERT_THROWS_ANYTHING( thirdPartyFunction() );

//    TS_ASSERT_THROWS_EQUALS( validate(), const std::exception &e,
//                             e.what(), "Invalid value" );
//    TS_ASSERT_THROWS_ASSERT( validate(), const Error &e,
//                             TS_ASSERT_DIFFERS( e.code(), SUCCESS ) );
//}

//If you need to comment out tests, use C++-style comments. Also, if you just don't want CxxTest to run a specific test function, you can temporarily change its name, e.g. by prefixing it with x:

//     class MyTest : public CxxTest::TestSuite
//     {
//     public:
//     // void testFutureStuff()
//     // {
//     // }

//        void xtestFutureStuff()
//        {
//        }
//     };

class MatrixTestSuite : public CxxTest::TestSuite{
  


  public:

    Matrix m;

    void setUp(void){
	

    }
    void testIndexOperator (void){

        std::filebuf fb;
        fb.open("matrices.dat",std::ios::in);
	std::istream ins(&fb);
	
	std::cerr << std::endl;
        while(ins){
	    std::cerr<<(char)ins.get();
        }
	std::cerr << std::endl;


        ins >> m;



        TS_ASSERT( m[ 0 ][ 1 ] == 0 );
        const Matrix m_const(3,3);
        //TS_ASSERT_THROWS_ANYTHING(m_const[2][2] = 1337);
        //TS_ASSERT_EQUALS(m_const[2][2], 1337);

    }

    void testCopying(void){


        Matrix m2(m);
        TS_ASSERT(m2[0][0] == 1);
        TS_ASSERT(m2[0][1] == 2);
        TS_ASSERT(m2[1][0] == 3);
        TS_ASSERT(m2[1][1] == 4);
        TS_ASSERT(m2.rows() == 2);
        TS_ASSERT(m2.cols() == 2);

	Matrix m3;
	m3 = m;
    }

};

#endif // MATRIX_TEST_H_INCLUDED

